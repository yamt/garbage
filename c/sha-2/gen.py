from mpmath import mp
from primePy import primes
import sys

ps = primes.first(80)


def frac(v, bits):
    x = 2**bits
    return int((v * x) % x)


def sha256_table():
    print(
        """
/* generated by gen.py */
/* https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf */
/* 5.3.3 */
static uint32_t H[] = {
"""[
            1:-1
        ]
    )
    for i, x in enumerate(ps[:8]):
        v = frac(mp.sqrt(mp.mpf(x)), 32)
        print(f"[{i}] = 0x{v:08x},")
    print(
        """
};
/* 4.2.2 */
static uint32_t K[] = {
"""[
            1:-1
        ]
    )
    for i, x in enumerate(ps[:64]):
        v = frac(mp.cbrt(mp.mpf(x)), 32)
        print(f"[{i}] = 0x{v:08x},")
    print("};")


def sha512_table():
    print(
        """
/* generated by gen.py */
/* https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf */
/* 5.3.5 */
static uint64_t H[] = {
"""[
            1:-1
        ]
    )
    for i, x in enumerate(ps[:8]):
        v = frac(mp.sqrt(mp.mpf(x)), 64)
        print(f"[{i}] = 0x{v:016x},")
    print(
        """
};
/* 4.2.3 */
static uint64_t K[] = {
"""[
            1:-1
        ]
    )
    for i, x in enumerate(ps[:80]):
        v = frac(mp.cbrt(mp.mpf(x)), 64)
        print(f"[{i}] = 0x{v:016x},")
    print("};")


mp.prec = 128
if len(sys.argv) > 1 and sys.argv[1] == "sha512":
    sha512_table()
else:
    sha256_table()
